// <auto-generated />
using System;
using DataBaseController.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBaseController.Migrations
{
    [DbContext(typeof(Kurosawa_DiaContext))]
    [Migration("20200706034228_Base")]
    partial class Base
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataBaseController.Modelos.AdmsBot", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<sbyte>("Permissao")
                        .HasColumnName("permissao")
                        .HasColumnType("tinyint");

                    b.Property<ulong?>("usuario")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("usuario");

                    b.ToTable("AdmsBot");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Canais", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<ulong>("ID")
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<byte>("TipoCanal")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ulong?>("codigo_servidor")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("codigo_servidor");

                    b.ToTable("Canais");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Cargos", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<ulong>("ID")
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<sbyte>("TipoCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tipoCargos")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((sbyte)0);

                    b.Property<ulong?>("codigo_servidor")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("codigo_servidor");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("DataBaseController.Modelos.ConfiguracoesServidores", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Configuracoes")
                        .HasColumnName("configuracoes")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("valor")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<ulong?>("servidor")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("servidor");

                    b.ToTable("ConfiguracoesServidoresAplicada");
                });

            modelBuilder.Entity("DataBaseController.Modelos.CustomReactions", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod_cr")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Modo")
                        .HasColumnName("modo_cr")
                        .HasColumnType("bool");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnName("resposta_cr")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnName("trigger_cr")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<ulong?>("servidor_cr")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("servidor_cr");

                    b.ToTable("CustomReactions");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Fuck", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Explicit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("explicitImage")
                        .HasColumnType("bool")
                        .HasDefaultValue(false);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("urlImage")
                        .HasColumnType("varchar(255)");

                    b.Property<ulong?>("codigo_usuario")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("codigo_usuario");

                    b.ToTable("Fuck");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Insultos", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cod")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Insulto")
                        .IsRequired()
                        .HasColumnName("insulto")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<ulong?>("usuario")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Cod");

                    b.HasIndex("usuario");

                    b.ToTable("Insultos");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Servidores", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("codigo_servidor")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<sbyte>("Especial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("especial_servidor")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((sbyte)1);

                    b.Property<ulong>("ID")
                        .HasColumnName("id_servidor")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome_servidor")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.Property<string>("Prefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prefix_servidor")
                        .HasColumnType("varchar(25)")
                        .HasDefaultValue(null);

                    b.HasKey("Cod");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Servidores");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Servidores_Usuarios", b =>
                {
                    b.Property<ulong>("ServidorCod")
                        .HasColumnName("Servidores_codigo_servidor")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("UsuarioCod")
                        .HasColumnName("Usuarios_codigo_usuario")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("ServidorCod", "UsuarioCod");

                    b.HasIndex("UsuarioCod");

                    b.ToTable("Servidores_Usuarios");
                });

            modelBuilder.Entity("DataBaseController.Modelos.Usuarios", b =>
                {
                    b.Property<ulong>("Cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("codigo_usuario")
                        .HasColumnType("bigint unsigned")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<ulong>("ID")
                        .HasColumnName("id_usuario")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome_usuario")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4");

                    b.HasKey("Cod");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DataBaseController.Modelos.AdmsBot", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Usuarios", "Usuario")
                        .WithMany("AdmsBots")
                        .HasForeignKey("usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.Canais", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Servidores", "Servidor")
                        .WithMany("Canais")
                        .HasForeignKey("codigo_servidor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.Cargos", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Servidores", "Servidor")
                        .WithMany("Cargos")
                        .HasForeignKey("codigo_servidor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.ConfiguracoesServidores", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Servidores", "Servidor")
                        .WithMany("Configuracoes")
                        .HasForeignKey("servidor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.CustomReactions", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Servidores", "Servidor")
                        .WithMany("CustomReactions")
                        .HasForeignKey("servidor_cr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.Fuck", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Usuarios", "Usuario")
                        .WithMany("Fuck")
                        .HasForeignKey("codigo_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.Insultos", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Usuarios", "Usuario")
                        .WithMany("Insultos")
                        .HasForeignKey("usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBaseController.Modelos.Servidores_Usuarios", b =>
                {
                    b.HasOne("DataBaseController.Modelos.Servidores", "Servidor")
                        .WithMany("ServidoresUsuarios")
                        .HasForeignKey("ServidorCod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBaseController.Modelos.Usuarios", "Usuario")
                        .WithMany("ServidoresUsuarios")
                        .HasForeignKey("UsuarioCod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
